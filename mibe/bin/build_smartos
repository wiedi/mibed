#!/bin/bash
#
# build_smartos - Image builder for SmartOS images
# https://github.com/joyent/mibe
#
# Copyright (c) 2013 Joyent Inc., All rights reserved.

set -o errexit
set -o pipefail
#set -o nounset
#set -o xtrace
#export 'PS4=+ $me.$LINENO ';

usage() {
	cat <<- EOF >&2

	build_smartos - version ${mi_version}
	Image builder for SmartOS images

	Usage: $0 [options] BUILD_BASE BUILD_ZONE BUILD_REPO

	Options:

	       None at this time.

	Arguments:
    
	       BUILD_BASE      Build image to use for base of the image.  This image
	                       must already exist in the ZFS hierarchy.
	                       e.g. base64-13.2.1

	       BUILD_ZONE      Build zone to use for building out the image.  The
	                       UUID of a zone that is already installed and running.
	                       e.g. b23882cc-3d9e-11e3-aa2f-83b8d8746936

	       BUILD_REPO      Build repository to use which contains the necessary
	                       build files for the image.
	                       e.g. mi-percona

	EOF

	exit 1;
}
mi_version="1.0.0";

shift $(($OPTIND - 1))
if [[ $# = 3 ]]; then
        mi_bimage="$1";
        mi_bzone="$2";
        mi_brepo="$3";
else
        usage;
fi

# Set mi_home and source mi_home/lib/mibe.inc if exists
mi_home=$(dirname $(cd ${0%/*} && pwd -P));
[[ -s "${mi_home}/lib/mibe.inc" ]] && source ${mi_home}/lib/mibe.inc || { echo "* ERROR - ${mi_home}/lib/mibe.inc not found, can't continue."; exit 1; }

trap zone_cleanup_sighandler INT TERM;

printf "\nbuild_smartos - version ${mi_version}\n";
printf "Image builder for SmartOS images\n";

# Get repository directory and variables
get_reposdir;

# Sanity check everything before starting
build_sanitycheck;

# Backup the zonepath and halt the build zone
zone_backup_zonepath;
zone_halt;

# Configure the build zone for imaging
zone_configure_buildzone;

# Boot the build zone
zone_boot;

# Copy "copy" directory into build zone
zone_copyin_files;

# Create motd, product, and install packages in the build zone
zone_create_motdproduct;
zone_install_packages;

# Execute the customize script in the build zone
zone_exec_customize;

# Halt build zone and un-configure it
zone_halt;
zone_unconfigure_buildzone;

# Create dump of build zone
zone_create_dumpmanifest;

# Clean up
zone_cleanup;

printf "Image:    ${mi_bfinal_dump}\n";
printf "Manifest: ${mi_bfinal_manifest}\n\n";

exit 0;
